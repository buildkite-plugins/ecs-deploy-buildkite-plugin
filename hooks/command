#!/bin/bash
set -euo pipefail

# Reads either a value or a list from plugin config
function plugin_read_list() {
  prefix_read_list "BUILDKITE_PLUGIN_ECS_DEPLOY_$1"
}

# Reads either a value or a list from the given env prefix
function prefix_read_list() {
  local prefix="$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

cluster=${BUILDKITE_PLUGIN_ECS_DEPLOY_CLUSTER?}
task_family=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_FAMILY?}
service_name=${BUILDKITE_PLUGIN_ECS_DEPLOY_SERVICE?}
images=()
while read -r line ; do
  [[ -n "$line" ]] && images+=("$line")
done <<< "$(plugin_read_list IMAGE)"
task_definition=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_DEFINITION?}
desired_count=${BUILDKITE_PLUGIN_ECS_DEPLOY_DESIRED_COUNT:-"1"}
task_role_arn=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_ROLE_ARN:-""}
target_group=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_GROUP:-""}
load_balancer_name=${BUILDKITE_PLUGIN_ECS_DEPLOY_LOAD_BALANCER_NAME:-""}
target_container=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_CONTAINER_NAME:-""}
target_port=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_CONTAINER_PORT:-""}
execution_role=${BUILDKITE_PLUGIN_ECS_DEPLOY_EXECUTION_ROLE:-""}
region=${BUILDKITE_PLUGIN_ECS_DEPLOY_REGION:-""}

if [[ $region != "" ]]; then
  # shellcheck disable=SC2034 # Used by the aws cli
  AWS_DEFAULT_REGION=${region}
fi

# Resolve any runtime environment variables it has
target_group=$(eval "echo $target_group")
load_balancer_name=$(eval "echo $load_balancer_name")

deployment_config=${BUILDKITE_PLUGIN_ECS_DEPLOY_DEPLOYMENT_CONFIGURATION:-"100/200"}
# shellcheck disable=SC2206
min_max_percent=(${deployment_config//\// })
min_deploy_perc=${min_max_percent[0]}
max_deploy_perc=${min_max_percent[1]}

if [[ $(jq '. | keys |first' "$task_definition") != "0" ]]; then
    echo "^^^"
    echo "Invalid Task Definition"
    echo 'JSON definition should be in the format of [{"image": "..."}]'
    exit 1
fi

function create_service() {
    local cluster_name=$1
    local task_definition=$2
    local service_name=$3
    local desired_count=$4
    local target_group_arguments
    target_group_arguments=$(generate_target_group_arguments "$5" "$6" "$7")

    # shellcheck disable=SC2016
    service_defined=$(aws ecs describe-services --cluster "$cluster_name" --service "$service_name" --query 'services[?status==`ACTIVE`].status' --output text |wc -l)
    if [[ $service_defined -eq 0 ]]; then
        echo "--- :ecs: Creating a Service $service_name in cluster $cluster_name"
        # shellcheck disable=SC2086
        aws ecs create-service \
        --cluster "$cluster_name" \
        --service-name "$service_name" \
        --task-definition "$task_definition" \
        --desired-count "$desired_count" \
        --deployment-configuration "maximumPercent=${max_deploy_perc},minimumHealthyPercent=${min_deploy_perc}" \
        $target_group_arguments
    fi
}

function generate_target_group_arguments() {
    local target_group=$1
    local target_container=$2
    local target_port=$3
    local target_group_arguments=""
    if [[ -n $target_container ]] && [[ -n $target_port ]]; then
      local load_balancer_ref=""
      if [[ -n $target_group ]]; then
        load_balancer_ref="targetGroupArn=${target_group}"
      elif [[ -n $load_balancer_name ]]; then
        load_balancer_ref="loadBalancerName=${load_balancer_name}"
      else
        echo "+++ ^^^"
        # shellcheck disable=SC2016
        echo '+++ You must specify either `target-group` or `load-balancer-name`'
        exit 1
      fi

      target_group_arguments="--load-balancers ${load_balancer_ref},containerName=${target_container},containerPort=${target_port}"
    fi
    echo "$target_group_arguments"
}

## This is the template definition of your containers
image_idx=0
container_definitions_json=$(cat "${task_definition}")
for image in "${images[@]}"; do
  container_definitions_json=$(echo "$container_definitions_json" | jq --arg IMAGE "$image" \
  ".[${image_idx}].image=\$IMAGE"
  )
  image_idx=$((image_idx+1))
done

echo "--- :ecs: Registering new task definition for ${task_family}"
register_command="aws ecs register-task-definition \
    --family ${task_family} \
    --container-definitions '$container_definitions_json'"

if [[ -n "${task_role_arn}" ]]; then
    register_command+=" --task-role-arn ${task_role_arn}"
fi

if [[ -n "${execution_role}" ]]; then
    register_command+=" --execution-role-arn ${execution_role}"
fi

if [[ -n "${cpu}" ]]; then
    register_command+=" --cpu ${cpu}"
fi

if [[ -n "${memory}" ]]; then
    register_command+=" --memory ${memory}"
fi

json_output=$(eval "$register_command")
register_exit_code=$?

if [[ $register_exit_code -ne 0 ]] ; then
  echo "+++ ^^^"
  echo "+++ Failed to register task defintion"
  exit "$register_exit_code"
fi

task_revision=$(jq '.taskDefinition.revision' <<< "$json_output")
echo "Registered ${task_family}:${task_revision}"

# Create service if it doesn't already exist
create_service "$cluster" "${task_family}:${task_revision}" "$service_name" "$desired_count" "$target_group" "$target_container" "$target_port"

# shellcheck disable=SC2016
lb_config=$(aws ecs describe-services --cluster "$cluster" --services "$service_name" --query 'services[?status==`ACTIVE`]' |jq -r '.[0].loadBalancers[0]')
error="+++ ^^^
+++ Cannot update a service to add/remove a load balancer. First delete the service and then run again, or rename the service to force a new one to be created"

# No easy way to tell if the target group has changed, since describe-services only returns the load balancer name
if [[ "$lb_config" == "null" ]]; then
  if [[ -n "$target_group" ]] || [[ -n "$load_balancer_name" ]]; then
    echo "$error. ELB configured but none set in container"
    exit 1
  fi
fi

if [[ "$lb_config" == "null" ]]; then
  # noop
  true
elif [[ $(echo "$lb_config" |jq -r '.containerName') != "$target_container" ]] || [[ $(echo "$lb_config" |jq -r '.containerPort') -ne $target_port ]]; then
  echo "$error. Container config differs"
  exit 1
elif [[ -n "$target_group" ]] && [[ $(echo "$lb_config" |jq -r '.targetGroupArn') != "$target_group" ]]; then
  echo "$error. ALB config differs"
  exit 1
elif [[ -n "$load_balancer_name" ]] && [[ $(echo "$lb_config" |jq -r '.loadBalancerName') != "$load_balancer_name" ]]; then
  echo "$error. ELB config differs"
  exit 1
fi

echo "--- :ecs: Updating service for ${service_name}"
aws ecs update-service \
  --cluster "${cluster}" \
  --service "${service_name}" \
  --task-definition "${task_family}:${task_revision}"

## Now we wait till it's stable
echo "--- :ecs: Waiting for services to stabilize"
deploy_exitcode=0
aws ecs wait services-stable \
  --cluster "${cluster}" \
  --services "${service_name}" || deploy_exitcode=$?


service_events=$(aws ecs describe-services \
  --cluster "${cluster}" \
  --service "${service_name}" \
  --query 'services[].events' --output text)

if [[ $deploy_exitcode -eq 0 ]]; then
  echo "--- :ecs: Service is up 🚀"
  echo "$service_events"
else
  echo "+++ :ecs: Service failed to deploy ❌"
  echo "$service_events"
  exit $deploy_exitcode
fi
